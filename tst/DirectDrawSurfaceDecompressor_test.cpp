/*
 * DirectDrawSurfaceDecompressor_test.cpp
 *
 *  Created on: Jun 23, 2019
 *      Author: Antero Nousiainen
 */

#include "DirectDrawSurfaceDecompressor.hpp"
#include <gtest/gtest.h>

using namespace image;
using namespace testing;

namespace
{
    class DirectDrawSurfaceDecompressorTest : public Test
    {
    protected:
        const DirectDrawSurface dds{
             0x20534444,
            {124, 0x1 | 0x2 | 0x4 | 0x1000, 8, 8, 32, 0, 1, {},
            {32, 0x4, 0x31545844, 0, 0, 0, 0, 0}, 0x1000, 0, 0, 0, 0},
            {{{0xffff, 0x3427}, 0b01111110010000111100001101011111},
            {{0xffff, 0x3427}, 0b11110101010000111100001110111101},
            {{0xffff, 0x3427}, 0b10111101110001110000011100110110},
            {{0xffff, 0x3427}, 0b01010111011100111111000010101100}}};

        const Bitmap bmp{
            {{'B', 'M'}, 246, 0, 54},
             {40, 8, 8, 1, 24, 0, 192, 11811, 11811, 0, 0},
            {{0x39, 0x86, 0x31}, {0x7b, 0xae, 0x73}, {0x7b, 0xae, 0x73}, {0xbd, 0xd7, 0xb5},
             {0x7b, 0xae, 0x73}, {0x39, 0x86, 0x31}, {0x39, 0x86, 0x31}, {0x39, 0x86, 0x31},
             {0x7b, 0xae, 0x73}, {0x39, 0x86, 0x31}, {0xff, 0xff, 0xff}, {0x7b, 0xae, 0x73},
             {0x7b, 0xae, 0x73}, {0xff, 0xff, 0xff}, {0x7b, 0xae, 0x73}, {0x39, 0x86, 0x31},
             {0x7b, 0xae, 0x73}, {0x39, 0x86, 0x31}, {0xff, 0xff, 0xff}, {0xff, 0xff, 0xff},
             {0xff, 0xff, 0xff}, {0xff, 0xff, 0xff}, {0x7b, 0xae, 0x73}, {0x7b, 0xae, 0x73},
             {0xbd, 0xd7, 0xb5}, {0x39, 0x86, 0x31}, {0x7b, 0xae, 0x73}, {0xff, 0xff, 0xff},
             {0xff, 0xff, 0xff}, {0x7b, 0xae, 0x73}, {0xbd, 0xd7, 0xb5}, {0xbd, 0xd7, 0xb5},
             {0xbd, 0xd7, 0xb5}, {0x7b, 0xae, 0x73}, {0x7b, 0xae, 0x73}, {0x39, 0x86, 0x31},
             {0x39, 0x86, 0x31}, {0x39, 0x86, 0x31}, {0x7b, 0xae, 0x73}, {0x7b, 0xae, 0x73},
             {0x7b, 0xae, 0x73}, {0xff, 0xff, 0xff}, {0xff, 0xff, 0xff}, {0x39, 0x86, 0x31},
             {0x7b, 0xae, 0x73}, {0xff, 0xff, 0xff}, {0xff, 0xff, 0xff}, {0x39, 0x86, 0x31},
             {0x7b, 0xae, 0x73}, {0xff, 0xff, 0xff}, {0xff, 0xff, 0xff}, {0x7b, 0xae, 0x73},
             {0x7b, 0xae, 0x73}, {0xff, 0xff, 0xff}, {0xff, 0xff, 0xff}, {0x7b, 0xae, 0x73},
             {0x7b, 0xae, 0x73}, {0x7b, 0xae, 0x73}, {0x39, 0x86, 0x31}, {0x39, 0x86, 0x31},
             {0x39, 0x86, 0x31}, {0x7b, 0xae, 0x73}, {0x7b, 0xae, 0x73}, {0xbd, 0xd7, 0xb5}}};
    };
}

TEST_F(DirectDrawSurfaceDecompressorTest, CanThrowAndCatchBadSize)
{
    try
    {
        throw new DirectDrawSurfaceDecompressor::BadSize();
    }
    catch (const std::invalid_argument * e)
    {
        EXPECT_STREQ("bad size", e->what());
        delete e;
    }
}

TEST_F(DirectDrawSurfaceDecompressorTest, ThrowsBadSizeWhenNoColorData)
{
    EXPECT_THROW(DirectDrawSurfaceDecompressor::decompress({}, 0, 0), DirectDrawSurfaceDecompressor::BadSize);
}

TEST_F(DirectDrawSurfaceDecompressorTest, Decompress)
{
    EXPECT_EQ(bmp.colors, DirectDrawSurfaceDecompressor::decompress(dds.data, dds.height(), dds.width()));
}
