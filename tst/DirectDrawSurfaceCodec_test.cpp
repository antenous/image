/*
 * DirectDrawSurfaceCodec_test.cpp
 *
 *  Created on: May 22, 2020
 *      Author: Antero Nousiainen
 */

#include "DirectDrawSurfaceCodec.hpp"
#include <gtest/gtest.h>

using namespace image;
using namespace testing;

namespace
{
    class DirectDrawSurfaceCodecTest : public Test
    {
    protected:
        const Bitmap original{Bitmap::make(8, 8,
            {{0x3c, 0x85, 0x32}, {0x43, 0xbb, 0x33}, {0x43, 0xbb, 0x33}, {0x89, 0xd1, 0x80},
             {0x43, 0xbb, 0x33}, {0x3c, 0x85, 0x32}, {0x3c, 0x85, 0x32}, {0x3c, 0x85, 0x32},
             {0x43, 0xbb, 0x33}, {0x3c, 0x85, 0x32}, {0xff, 0xff, 0xff}, {0x43, 0xbb, 0x33},
             {0x43, 0xbb, 0x33}, {0xff, 0xff, 0xff}, {0x43, 0xbb, 0x33}, {0x3c, 0x85, 0x32},
             {0x43, 0xbb, 0x33}, {0x3c, 0x85, 0x32}, {0xff, 0xff, 0xff}, {0xff, 0xff, 0xff},
             {0xff, 0xff, 0xff}, {0xff, 0xff, 0xff}, {0x43, 0xbb, 0x33}, {0x43, 0xbb, 0x33},
             {0x89, 0xd1, 0x80}, {0x3c, 0x85, 0x32}, {0x43, 0xbb, 0x33}, {0xff, 0xff, 0xff},
             {0xff, 0xff, 0xff}, {0x43, 0xbb, 0x33}, {0x89, 0xd1, 0x80}, {0x89, 0xd1, 0x80},
             {0x89, 0xd1, 0x80}, {0x43, 0xbb, 0x33}, {0x43, 0xbb, 0x33}, {0x3c, 0x85, 0x32},
             {0x3c, 0x85, 0x32}, {0x3c, 0x85, 0x32}, {0x43, 0xbb, 0x33}, {0x43, 0xbb, 0x33},
             {0x43, 0xbb, 0x33}, {0xff, 0xff, 0xff}, {0xff, 0xff, 0xff}, {0x3c, 0x85, 0x32},
             {0x43, 0xbb, 0x33}, {0xff, 0xff, 0xff}, {0xff, 0xff, 0xff}, {0x3c, 0x85, 0x32},
             {0x43, 0xbb, 0x33}, {0xff, 0xff, 0xff}, {0xff, 0xff, 0xff}, {0x43, 0xbb, 0x33},
             {0x43, 0xbb, 0x33}, {0xff, 0xff, 0xff}, {0xff, 0xff, 0xff}, {0x43, 0xbb, 0x33},
             {0x43, 0xbb, 0x33}, {0x43, 0xbb, 0x33}, {0x3c, 0x85, 0x32}, {0x3c, 0x85, 0x32},
             {0x3c, 0x85, 0x32}, {0x43, 0xbb, 0x33}, {0x43, 0xbb, 0x33}, {0x89, 0xd1, 0x80}})};

        const DirectDrawSurface dds{DirectDrawSurface::make(8, 8,
            {{{0xffff, 0x3427}, 0b01111110010000111100001101011111},
             {{0xffff, 0x3427}, 0b11110101010000111100001110111101},
             {{0xffff, 0x3427}, 0b10111101110001110000011100110110},
             {{0xffff, 0x3427}, 0b01010111011100111111000010101100}})};

        const Bitmap uncompressed{Bitmap::make(8, 8,
            {{0x39, 0x86, 0x31}, {0x7b, 0xae, 0x73}, {0x7b, 0xae, 0x73}, {0xbd, 0xd7, 0xb5},
             {0x7b, 0xae, 0x73}, {0x39, 0x86, 0x31}, {0x39, 0x86, 0x31}, {0x39, 0x86, 0x31},
             {0x7b, 0xae, 0x73}, {0x39, 0x86, 0x31}, {0xff, 0xff, 0xff}, {0x7b, 0xae, 0x73},
             {0x7b, 0xae, 0x73}, {0xff, 0xff, 0xff}, {0x7b, 0xae, 0x73}, {0x39, 0x86, 0x31},
             {0x7b, 0xae, 0x73}, {0x39, 0x86, 0x31}, {0xff, 0xff, 0xff}, {0xff, 0xff, 0xff},
             {0xff, 0xff, 0xff}, {0xff, 0xff, 0xff}, {0x7b, 0xae, 0x73}, {0x7b, 0xae, 0x73},
             {0xbd, 0xd7, 0xb5}, {0x39, 0x86, 0x31}, {0x7b, 0xae, 0x73}, {0xff, 0xff, 0xff},
             {0xff, 0xff, 0xff}, {0x7b, 0xae, 0x73}, {0xbd, 0xd7, 0xb5}, {0xbd, 0xd7, 0xb5},
             {0xbd, 0xd7, 0xb5}, {0x7b, 0xae, 0x73}, {0x7b, 0xae, 0x73}, {0x39, 0x86, 0x31},
             {0x39, 0x86, 0x31}, {0x39, 0x86, 0x31}, {0x7b, 0xae, 0x73}, {0x7b, 0xae, 0x73},
             {0x7b, 0xae, 0x73}, {0xff, 0xff, 0xff}, {0xff, 0xff, 0xff}, {0x39, 0x86, 0x31},
             {0x7b, 0xae, 0x73}, {0xff, 0xff, 0xff}, {0xff, 0xff, 0xff}, {0x39, 0x86, 0x31},
             {0x7b, 0xae, 0x73}, {0xff, 0xff, 0xff}, {0xff, 0xff, 0xff}, {0x7b, 0xae, 0x73},
             {0x7b, 0xae, 0x73}, {0xff, 0xff, 0xff}, {0xff, 0xff, 0xff}, {0x7b, 0xae, 0x73},
             {0x7b, 0xae, 0x73}, {0x7b, 0xae, 0x73}, {0x39, 0x86, 0x31}, {0x39, 0x86, 0x31},
             {0x39, 0x86, 0x31}, {0x7b, 0xae, 0x73}, {0x7b, 0xae, 0x73}, {0xbd, 0xd7, 0xb5}})};
    };

    TEST_F(DirectDrawSurfaceCodecTest, CanThrowAndCatchBadSize)
    {
        try
        {
            throw new DirectDrawSurfaceCodec::BadSize();
        }
        catch (const std::invalid_argument * e)
        {
            EXPECT_STREQ("bad size", e->what());
            delete e;
        }
    }

    TEST_F(DirectDrawSurfaceCodecTest, ThrowBadSizeWhenBitmapHeightIsNotMultipleOfFour)
    {
        EXPECT_THROW(DirectDrawSurfaceCodec::compress(3, 16, Bitmap::Data(3*16)), DirectDrawSurfaceCodec::BadSize);
    }

    TEST_F(DirectDrawSurfaceCodecTest, ThrowBadSizeWhenBitmapWidthIsNotMultipleOfFour)
    {
        EXPECT_THROW(DirectDrawSurfaceCodec::compress(16, 3, Bitmap::Data(16*3)), DirectDrawSurfaceCodec::BadSize);
    }

    TEST_F(DirectDrawSurfaceCodecTest, ThrowBadSizeWhenDirectDrawSurfaceHeightIsNotMultipleOfFour)
    {
        EXPECT_THROW(DirectDrawSurfaceCodec::decompress(3, 16, DirectDrawSurface::Data(3*16)), DirectDrawSurfaceCodec::BadSize);
    }

    TEST_F(DirectDrawSurfaceCodecTest, ThrowBadSizeWhenDirectDrawSurfaceWidthIsNotMultipleOfFour)
    {
        EXPECT_THROW(DirectDrawSurfaceCodec::decompress(16, 3, DirectDrawSurface::Data(16*3)), DirectDrawSurfaceCodec::BadSize);
    }

    TEST_F(DirectDrawSurfaceCodecTest, Compress)
    {
        EXPECT_EQ(dds.data, DirectDrawSurfaceCodec::compress(original.height(), original.width(), original.data));
    }

    TEST_F(DirectDrawSurfaceCodecTest, Decompress)
    {
        EXPECT_EQ(uncompressed.data, DirectDrawSurfaceCodec::decompress(dds.width(), dds.height(), dds.data));
    }
}
