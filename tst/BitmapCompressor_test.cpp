/*
 * BitmapCompressor_test.cpp
 *
 *  Created on: Jun 23, 2019
 *      Author: Antero Nousiainen
 */

#include "BitmapCompressor.hpp"
#include <gtest/gtest.h>
#include "DirectX.hpp"

using namespace image;
using namespace testing;

namespace
{
    class BitmapCompressorTest : public Test
    {
    protected:
        const Bitmap bmp{
            {{'B', 'M'}, 246, 0, 54},
             {40, 8, 8, 1, 24, 0, 192, 11811, 11811, 0, 0},
            {{0x3c, 0x85, 0x32}, {0x43, 0xbb, 0x33}, {0x43, 0xbb, 0x33}, {0x89, 0xd1, 0x80},
             {0x43, 0xbb, 0x33}, {0x3c, 0x85, 0x32}, {0x3c, 0x85, 0x32}, {0x3c, 0x85, 0x32},
             {0x43, 0xbb, 0x33}, {0x3c, 0x85, 0x32}, {0xff, 0xff, 0xff}, {0x43, 0xbb, 0x33},
             {0x43, 0xbb, 0x33}, {0xff, 0xff, 0xff}, {0x43, 0xbb, 0x33}, {0x3c, 0x85, 0x32},
             {0x43, 0xbb, 0x33}, {0x3c, 0x85, 0x32}, {0xff, 0xff, 0xff}, {0xff, 0xff, 0xff},
             {0xff, 0xff, 0xff}, {0xff, 0xff, 0xff}, {0x43, 0xbb, 0x33}, {0x43, 0xbb, 0x33},
             {0x89, 0xd1, 0x80}, {0x3c, 0x85, 0x32}, {0x43, 0xbb, 0x33}, {0xff, 0xff, 0xff},
             {0xff, 0xff, 0xff}, {0x43, 0xbb, 0x33}, {0x89, 0xd1, 0x80}, {0x89, 0xd1, 0x80},
             {0x89, 0xd1, 0x80}, {0x43, 0xbb, 0x33}, {0x43, 0xbb, 0x33}, {0x3c, 0x85, 0x32},
             {0x3c, 0x85, 0x32}, {0x3c, 0x85, 0x32}, {0x43, 0xbb, 0x33}, {0x43, 0xbb, 0x33},
             {0x43, 0xbb, 0x33}, {0xff, 0xff, 0xff}, {0xff, 0xff, 0xff}, {0x3c, 0x85, 0x32},
             {0x43, 0xbb, 0x33}, {0xff, 0xff, 0xff}, {0xff, 0xff, 0xff}, {0x3c, 0x85, 0x32},
             {0x43, 0xbb, 0x33}, {0xff, 0xff, 0xff}, {0xff, 0xff, 0xff}, {0x43, 0xbb, 0x33},
             {0x43, 0xbb, 0x33}, {0xff, 0xff, 0xff}, {0xff, 0xff, 0xff}, {0x43, 0xbb, 0x33},
             {0x43, 0xbb, 0x33}, {0x43, 0xbb, 0x33}, {0x3c, 0x85, 0x32}, {0x3c, 0x85, 0x32},
             {0x3c, 0x85, 0x32}, {0x43, 0xbb, 0x33}, {0x43, 0xbb, 0x33}, {0x89, 0xd1, 0x80}}};

        const DirectDrawSurface dds{
             DirectX::DDS_MAGIC,
            {124, DirectX::DDS_HEADER_FLAGS_TEXTURE, 8, 8, 32, 0, 1, {},
            {32, DirectX::DDS_FOURCC, DirectX::DDS_DXT1, 0, 0, 0, 0, 0},
             DirectX::DDS_SURFACE_FLAGS_TEXTURE, 0, 0, 0, 0},
            {{{0xffff, 0x3427}, 0b01111110010000111100001101011111},
             {{0xffff, 0x3427}, 0b11110101010000111100001110111101},
             {{0xffff, 0x3427}, 0b10111101110001110000011100110110},
             {{0xffff, 0x3427}, 0b01010111011100111111000010101100}}};
    };
}

TEST_F(BitmapCompressorTest, CanThrowAndCatchBadSize)
{
    try
    {
        throw new BitmapCompressor::BadSize();
    }
    catch (const std::invalid_argument * e)
    {
        EXPECT_STREQ("bad size", e->what());
        delete e;
    }
}

TEST_F(BitmapCompressorTest, ThrowsBadSizeWhenNoColorData)
{
    EXPECT_THROW(BitmapCompressor::compress(Bitmap::Colors(), 0, 0), BitmapCompressor::BadSize);
}

TEST_F(BitmapCompressorTest, ThrowsBadSizeWhenNoFullBlocksInColorData)
{
    EXPECT_THROW(BitmapCompressor::compress(Bitmap::Colors(1), 0, 1), BitmapCompressor::BadSize);
}

TEST_F(BitmapCompressorTest, Compress)
{
    EXPECT_EQ(dds.data, BitmapCompressor::compress(bmp.colors, bmp.height(), bmp.width()));
}
